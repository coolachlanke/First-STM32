
blinky_bitbanger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d4  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000304  0800030c  0000130c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000304  08000304  0000130c  2**0
                  CONTENTS
  4 .ARM          00000000  08000304  08000304  0000130c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000304  0800030c  0000130c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000304  08000304  00001304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000308  08000308  00001308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000130c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800030c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800030c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000016c  00000000  00000000  00001335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000e3  00000000  00000000  000014a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  00001588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000033  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f5e  00000000  00000000  0000160b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000045b  00000000  00000000  00002569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003bf5  00000000  00000000  000029c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000065b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000084  00000000  00000000  000065fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00006680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002ec 	.word	0x080002ec

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002ec 	.word	0x080002ec

08000170 <delay_ms.0>:
    *systick_load = (8000000 / 1000) - 1;  // Reload for 1ms tick
    *systick_val  = 0;                     // Clear current value
    *systick_ctrl = (1 << 2) | (1 << 0);   // CLKSOURCE=CPU, ENABLE=1

    // Delay Function
    void delay_ms(uint32_t ms) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	4661      	mov	r1, ip
 800017a:	f8c7 c000 	str.w	ip, [r7]
        for (uint32_t i = 0; i < ms; ++i) {
 800017e:	2300      	movs	r3, #0
 8000180:	60fb      	str	r3, [r7, #12]
 8000182:	e009      	b.n	8000198 <delay_ms.0+0x28>
            while (((*systick_ctrl) & (1 << 16)) == 0);
 8000184:	bf00      	nop
 8000186:	680b      	ldr	r3, [r1, #0]
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800018e:	2b00      	cmp	r3, #0
 8000190:	d0f9      	beq.n	8000186 <delay_ms.0+0x16>
        for (uint32_t i = 0; i < ms; ++i) {
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	3301      	adds	r3, #1
 8000196:	60fb      	str	r3, [r7, #12]
 8000198:	68fa      	ldr	r2, [r7, #12]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	429a      	cmp	r2, r3
 800019e:	d3f1      	bcc.n	8000184 <delay_ms.0+0x14>
        }
    }
 80001a0:	bf00      	nop
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr

080001ac <main>:
int main(void) {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b088      	sub	sp, #32
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001b6:	60bb      	str	r3, [r7, #8]
    volatile uint32_t *rcc_apb2enr = (volatile uint32_t *)0x40021018;
 80001b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000238 <main+0x8c>)
 80001ba:	61fb      	str	r3, [r7, #28]
    *rcc_apb2enr |= (1 << 4); // Set IOPCEN (bit 4)
 80001bc:	69fb      	ldr	r3, [r7, #28]
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	f043 0210 	orr.w	r2, r3, #16
 80001c4:	69fb      	ldr	r3, [r7, #28]
 80001c6:	601a      	str	r2, [r3, #0]
    volatile uint32_t *gpioc_crh = (volatile uint32_t *)0x40011004;
 80001c8:	4b1c      	ldr	r3, [pc, #112]	@ (800023c <main+0x90>)
 80001ca:	61bb      	str	r3, [r7, #24]
    *gpioc_crh &= ~(0xF << 20); // Clear MODE13 and CNF13
 80001cc:	69bb      	ldr	r3, [r7, #24]
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80001d4:	69bb      	ldr	r3, [r7, #24]
 80001d6:	601a      	str	r2, [r3, #0]
    *gpioc_crh |= (0x1 << 20); // MODE13 = 01 (output 10 MHz), CNF13 = 00 (push-pull)
 80001d8:	69bb      	ldr	r3, [r7, #24]
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80001e0:	69bb      	ldr	r3, [r7, #24]
 80001e2:	601a      	str	r2, [r3, #0]
    volatile uint32_t *gpioc_odr = (volatile uint32_t *)0x4001100C;
 80001e4:	4b16      	ldr	r3, [pc, #88]	@ (8000240 <main+0x94>)
 80001e6:	617b      	str	r3, [r7, #20]
    volatile uint32_t *systick_ctrl = (volatile uint32_t *)0xE000E010;
 80001e8:	4b16      	ldr	r3, [pc, #88]	@ (8000244 <main+0x98>)
 80001ea:	607b      	str	r3, [r7, #4]
    volatile uint32_t *systick_load = (volatile uint32_t *)0xE000E014;
 80001ec:	4b16      	ldr	r3, [pc, #88]	@ (8000248 <main+0x9c>)
 80001ee:	613b      	str	r3, [r7, #16]
    volatile uint32_t *systick_val  = (volatile uint32_t *)0xE000E018;
 80001f0:	4b16      	ldr	r3, [pc, #88]	@ (800024c <main+0xa0>)
 80001f2:	60fb      	str	r3, [r7, #12]
    *systick_load = (8000000 / 1000) - 1;  // Reload for 1ms tick
 80001f4:	693b      	ldr	r3, [r7, #16]
 80001f6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80001fa:	601a      	str	r2, [r3, #0]
    *systick_val  = 0;                     // Clear current value
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
    *systick_ctrl = (1 << 2) | (1 << 0);   // CLKSOURCE=CPU, ENABLE=1
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2205      	movs	r2, #5
 8000206:	601a      	str	r2, [r3, #0]

    // Main Blink Loop
    while (1) {
        *gpioc_odr &= ~(1 << 13);  // Set PC13 LOW
 8000208:	697b      	ldr	r3, [r7, #20]
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8000210:	697b      	ldr	r3, [r7, #20]
 8000212:	601a      	str	r2, [r3, #0]
        delay_ms(250);
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	469c      	mov	ip, r3
 8000218:	20fa      	movs	r0, #250	@ 0xfa
 800021a:	f7ff ffa9 	bl	8000170 <delay_ms.0>

        *gpioc_odr |= (1 << 13);   // Set PC13 HIGH
 800021e:	697b      	ldr	r3, [r7, #20]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000226:	697b      	ldr	r3, [r7, #20]
 8000228:	601a      	str	r2, [r3, #0]
        delay_ms(250);
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	469c      	mov	ip, r3
 800022e:	20fa      	movs	r0, #250	@ 0xfa
 8000230:	f7ff ff9e 	bl	8000170 <delay_ms.0>
        *gpioc_odr &= ~(1 << 13);  // Set PC13 LOW
 8000234:	bf00      	nop
 8000236:	e7e7      	b.n	8000208 <main+0x5c>
 8000238:	40021018 	.word	0x40021018
 800023c:	40011004 	.word	0x40011004
 8000240:	4001100c 	.word	0x4001100c
 8000244:	e000e010 	.word	0xe000e010
 8000248:	e000e014 	.word	0xe000e014
 800024c:	e000e018 	.word	0xe000e018

08000250 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000250:	480d      	ldr	r0, [pc, #52]	@ (8000288 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000252:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000254:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000258:	480c      	ldr	r0, [pc, #48]	@ (800028c <LoopForever+0x6>)
  ldr r1, =_edata
 800025a:	490d      	ldr	r1, [pc, #52]	@ (8000290 <LoopForever+0xa>)
  ldr r2, =_sidata
 800025c:	4a0d      	ldr	r2, [pc, #52]	@ (8000294 <LoopForever+0xe>)
  movs r3, #0
 800025e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000260:	e002      	b.n	8000268 <LoopCopyDataInit>

08000262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000266:	3304      	adds	r3, #4

08000268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800026c:	d3f9      	bcc.n	8000262 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800026e:	4a0a      	ldr	r2, [pc, #40]	@ (8000298 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000270:	4c0a      	ldr	r4, [pc, #40]	@ (800029c <LoopForever+0x16>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000274:	e001      	b.n	800027a <LoopFillZerobss>

08000276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000278:	3204      	adds	r2, #4

0800027a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800027c:	d3fb      	bcc.n	8000276 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800027e:	f000 f811 	bl	80002a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000282:	f7ff ff93 	bl	80001ac <main>

08000286 <LoopForever>:

LoopForever:
  b LoopForever
 8000286:	e7fe      	b.n	8000286 <LoopForever>
  ldr   r0, =_estack
 8000288:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800028c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000290:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000294:	0800030c 	.word	0x0800030c
  ldr r2, =_sbss
 8000298:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800029c:	2000001c 	.word	0x2000001c

080002a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a0:	e7fe      	b.n	80002a0 <ADC1_2_IRQHandler>
	...

080002a4 <__libc_init_array>:
 80002a4:	b570      	push	{r4, r5, r6, lr}
 80002a6:	2600      	movs	r6, #0
 80002a8:	4d0c      	ldr	r5, [pc, #48]	@ (80002dc <__libc_init_array+0x38>)
 80002aa:	4c0d      	ldr	r4, [pc, #52]	@ (80002e0 <__libc_init_array+0x3c>)
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	10a4      	asrs	r4, r4, #2
 80002b0:	42a6      	cmp	r6, r4
 80002b2:	d109      	bne.n	80002c8 <__libc_init_array+0x24>
 80002b4:	f000 f81a 	bl	80002ec <_init>
 80002b8:	2600      	movs	r6, #0
 80002ba:	4d0a      	ldr	r5, [pc, #40]	@ (80002e4 <__libc_init_array+0x40>)
 80002bc:	4c0a      	ldr	r4, [pc, #40]	@ (80002e8 <__libc_init_array+0x44>)
 80002be:	1b64      	subs	r4, r4, r5
 80002c0:	10a4      	asrs	r4, r4, #2
 80002c2:	42a6      	cmp	r6, r4
 80002c4:	d105      	bne.n	80002d2 <__libc_init_array+0x2e>
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002cc:	4798      	blx	r3
 80002ce:	3601      	adds	r6, #1
 80002d0:	e7ee      	b.n	80002b0 <__libc_init_array+0xc>
 80002d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d6:	4798      	blx	r3
 80002d8:	3601      	adds	r6, #1
 80002da:	e7f2      	b.n	80002c2 <__libc_init_array+0x1e>
 80002dc:	08000304 	.word	0x08000304
 80002e0:	08000304 	.word	0x08000304
 80002e4:	08000304 	.word	0x08000304
 80002e8:	08000308 	.word	0x08000308

080002ec <_init>:
 80002ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ee:	bf00      	nop
 80002f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f2:	bc08      	pop	{r3}
 80002f4:	469e      	mov	lr, r3
 80002f6:	4770      	bx	lr

080002f8 <_fini>:
 80002f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fa:	bf00      	nop
 80002fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fe:	bc08      	pop	{r3}
 8000300:	469e      	mov	lr, r3
 8000302:	4770      	bx	lr
